pipeline {
    agent any

    environment {
        AWS_REGION = "ap-northeast-2"
        ECR_REPO = "941377153895.dkr.ecr.ap-northeast-2.amazonaws.com/oops/ai"
        TAG = "${BUILD_NUMBER}"
        REPO_URL = "https://github.com/profect-Oops/AI-repo.git"
        BRANCH = "main"
        GITOPS_REPO = "https://github.com/profect-Oops/oops-k8s-manifests.git"
        GITOPS_BRANCH = "main"
        GITOPS_PATH = "airflow"
    }

    stages {
        stage('Checkout Code') {
            steps {
                sh '''
                rm -rf AI-repo
                git clone --no-checkout --depth 1 --filter=tree:0 ${REPO_URL} AI-repo
                cd AI-repo
                git sparse-checkout init --cone
                git sparse-checkout set docker_jenkins
                git checkout ${BRANCH}
                rm -rf .git
                '''
            }
        }

        stage('Login to AWS ECR') {
            steps {
                sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}"
            }
        }

        stage('Build & Tag & Push Docker Images to ECR') {
            steps {
                sh """
                echo "🛑 이전 Docker 이미지 정리"
                docker system prune -af || true

                echo "🐳 Docker 이미지 빌드 시작..."
                cd ${WORKSPACE}/AI-repo/docker_jenkins/
                docker-compose -f docker-compose.build.yml build --no-cache

                echo "🏷️ Docker 이미지 태깅"
                docker tag crypto_project-airflow-webserver:latest ${ECR_REPO}:${TAG}
                docker tag crypto_project-airflow-webserver:latest ${ECR_REPO}:latest

                echo "📤 AWS ECR로 이미지 Push"
                docker push ${ECR_REPO}:${TAG}
                docker push ${ECR_REPO}:latest
                """
            }
        }

        stage('Update GitOps Repo for ArgoCD') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'gitops-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                    echo "📥 GitOps 레포 클론 중..."
                    rm -rf oops-k8s-manifests
                    git clone --branch ${GITOPS_BRANCH} https://${GIT_USER}:${GIT_PASS}@github.com/profect-Oops/oops-k8s-manifests.git

                    cd oops-k8s-manifests/${GITOPS_PATH}

                    echo "📝 이미지 태그 업데이트"
                    IMG="${ECR_REPO}:${TAG}"
                    yq e -i '.spec.template.spec.containers[0].image = strenv(IMG)' webserver.yaml
                    yq e -i '.spec.template.spec.containers[0].image = strenv(IMG)' scheduler.yaml

                    git config user.name "somin"
                    git config user.email "airflow@jenkins.com"
                    git add webserver.yaml scheduler.yaml
                    git commit -m "🔄 Jenkins: Update Airflow image tag to ${TAG}" || echo "변경 사항 없음"
                    git push https://${GIT_USER}:${GIT_PASS}@github.com/profect-Oops/oops-k8s-manifests.git HEAD:${GITOPS_BRANCH}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ 배포 완료! ArgoCD가 변경 감지 후 자동 배포합니다."
        }
        failure {
            echo "❌ 배포 실패. 로그 확인 필요"
        }
    }
}
